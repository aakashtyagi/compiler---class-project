/* Generated By:JavaCC: Do not edit this line. EG1.java */
package comp;

public class EG1 implements EG1Constants {
  static SymbolTable st = new SymbolTable();
  static Quads qv = new Quads();
  static SemanticStack s = new SemanticStack();
  public static void main(String args []) throws ParseException
  {
    EG1 parser = new EG1(System.in);
    while (true)
    {
      System.out.println("Reading from standard input...");
      System.out.print("Enter an expression! Please dont copy and paste I hate that for some reason:");
//     try//      {        EG1.program();
//      }//      catch (Exception e)//      {//        System.out.println("NOK.");//        System.out.println(e.getMessage());//        EG1.ReInit(System.in);//      }//      catch (Error e)//      {//        System.out.println("Oops.");//        System.out.println(e.getMessage());//        break;//      }    }
  }

/****************************
*GRAMMAR AND PRODUCTION RULES
*****************************/
  static final public int one_line() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      program();
    {if (true) return 0;}
      break;
    case SEMI:
      jj_consume_token(SEMI);
    {if (true) return 1;}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public void program() throws ParseException {
    jj_consume_token(LBRACE);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
      case NOT:
      case IF:
      case WHILE:
      case BREAK:
      case CONTINUE:
      case RETURN:
      case SEMI:
      case LPAREN:
      case INTEGER:
      case ID:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      statement();
    }
    jj_consume_token(RBRACE);
  }

  static final public void statement() throws ParseException {
  Quad q;
  String a,b,jmp,nextq;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHILE:
      jj_consume_token(WHILE);
      test();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        jj_consume_token(LBRACE);
        label_2:
        while (true) {
          statement();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case MINUS:
          case NOT:
          case IF:
          case WHILE:
          case BREAK:
          case CONTINUE:
          case RETURN:
          case SEMI:
          case LPAREN:
          case INTEGER:
          case ID:
            ;
            break;
          default:
            jj_la1[2] = jj_gen;
            break label_2;
          }
        }
        jj_consume_token(RBRACE);
        break;
      case MINUS:
      case NOT:
      case IF:
      case WHILE:
      case BREAK:
      case CONTINUE:
      case RETURN:
      case SEMI:
      case LPAREN:
      case INTEGER:
      case ID:
        statement();
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case IF:
      jj_consume_token(IF);
      test();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        jj_consume_token(LBRACE);
        label_3:
        while (true) {
          statement();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case MINUS:
          case NOT:
          case IF:
          case WHILE:
          case BREAK:
          case CONTINUE:
          case RETURN:
          case SEMI:
          case LPAREN:
          case INTEGER:
          case ID:
            ;
            break;
          default:
            jj_la1[4] = jj_gen;
            break label_3;
          }
        }
        jj_consume_token(RBRACE);
        break;
      case MINUS:
      case NOT:
      case IF:
      case WHILE:
      case BREAK:
      case CONTINUE:
      case RETURN:
      case SEMI:
      case LPAREN:
      case INTEGER:
      case ID:
        statement();
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_1(2)) {
        jj_consume_token(ELSE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
          jj_consume_token(LBRACE);
          label_4:
          while (true) {
            statement();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case MINUS:
            case NOT:
            case IF:
            case WHILE:
            case BREAK:
            case CONTINUE:
            case RETURN:
            case SEMI:
            case LPAREN:
            case INTEGER:
            case ID:
              ;
              break;
            default:
              jj_la1[6] = jj_gen;
              break label_4;
            }
          }
          jj_consume_token(RBRACE);
          break;
        case MINUS:
        case NOT:
        case IF:
        case WHILE:
        case BREAK:
        case CONTINUE:
        case RETURN:
        case SEMI:
        case LPAREN:
        case INTEGER:
        case ID:
          statement();
          break;
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        ;
      }
      break;
    case MINUS:
    case NOT:
    case LPAREN:
    case INTEGER:
    case ID:
      expression();
      jj_consume_token(SEMI);
      break;
    case BREAK:
      jj_consume_token(BREAK);
      jj_consume_token(SEMI);
      break;
    case RETURN:
      jj_consume_token(RETURN);
      expression();
      jj_consume_token(SEMI);
      break;
    case CONTINUE:
      jj_consume_token(CONTINUE);
      jj_consume_token(SEMI);
      break;
    case SEMI:
      jj_consume_token(SEMI);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void test() throws ParseException {
    jj_consume_token(LPAREN);
    expression();
    jj_consume_token(RPAREN);
  }

  static final public void expression() throws ParseException {
    if (jj_2_2(2)) {
      id();
      jj_consume_token(EQUALS);
      expression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
      case NOT:
      case LPAREN:
      case INTEGER:
      case ID:
        condition();
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void condition() throws ParseException {
    disjunction();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QMARK:
      jj_consume_token(QMARK);
      expression();
      jj_consume_token(COLON);
      condition();
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
  }

  static final public void disjunction() throws ParseException {
    conjunction();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_5;
      }
      jj_consume_token(OR);
      conjunction();
    }
  }

  static final public void conjunction() throws ParseException {
    comparison();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_6;
      }
      jj_consume_token(AND);
      comparison();
    }
  }

  static final public void comparison() throws ParseException {
    relation();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUALTO:
      jj_consume_token(EQUALTO);
      relation();
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
  }

  static final public void relation() throws ParseException {
    sum();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LESS:
    case GREATER:
      relop();
      sum();
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
  }

  static final public void sum() throws ParseException {
    term();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_7;
      }
      addop();
      term();
    }
  }

  static final public void term() throws ParseException {
    factor();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
      case DIVIDE:
      case MODULO:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_8;
      }
      multop();
      factor();
    }
  }

  static final public void factor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case INTEGER:
    case ID:
      primary();
      break;
    case MINUS:
    case NOT:
      unaryop();
      primary();
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void primary() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      id();
      break;
    case INTEGER:
      jj_consume_token(INTEGER);
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      expression();
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void id() throws ParseException {
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACK:
      jj_consume_token(LBRACK);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        jj_consume_token(INTEGER);
        break;
      case ID:
        jj_consume_token(ID);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(RBRACK);
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
  }

  static final public void relop() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LESS:
      jj_consume_token(LESS);
      break;
    case GREATER:
      jj_consume_token(GREATER);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void multop() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULTIPLY:
      jj_consume_token(MULTIPLY);
      break;
    case DIVIDE:
      jj_consume_token(DIVIDE);
      break;
    case MODULO:
      jj_consume_token(MODULO);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void addop() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      break;
    case MINUS:
      jj_consume_token(MINUS);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void unaryop() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
      break;
    case NOT:
      jj_consume_token(NOT);
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_3R_23() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(ELSE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) return true;
    }
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(LBRACK)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_13()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_11()) return true;
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(CONTINUE)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(RETURN)) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(BREAK)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(6)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) return true;
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public EG1TokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[25];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40200000,0x43e8440,0x43e8440,0x443e8440,0x43e8440,0x443e8440,0x43e8440,0x443e8440,0x43e8440,0x4000440,0x1000000,0x800000,0x400000,0x2000,0x4800,0x60,0x380,0x4000440,0x4000000,0x0,0x10000000,0x4800,0x380,0x60,0x440,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0xa,0xa,0xa,0xa,0xa,0xa,0xa,0xa,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0xa,0xa,0x0,0x0,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[2];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public EG1(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public EG1(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new EG1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public EG1(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new EG1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public EG1(EG1TokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(EG1TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[41];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 25; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 41; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
